name: Build, push & deploy to Azure dev
on:
  push:
    branches: development

jobs:
  build-push-restart:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      # environment-specific vars
      REGISTRY: edrvn8n
      IMAGE_NAME: dev # repository inside ACR
      IMAGE_TAG: latest
      APP_NAME: edrv-n8n-dev
      DOCKERFILE_PATH: docker/images/n8n
      RG_NAME: n8n-resources

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC, no secrets)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Derive REGISTRY_SERVER env
        run: echo "REGISTRY_SERVER=${REGISTRY}.azurecr.io" >> $GITHUB_ENV

      - name: Fetch ACR access token
        id: acr_token
        uses: azure/cli@v2
        with:
          inlineScript: |
            TOKEN=$(az acr login \
                     --name $REGISTRY \
                     --expose-token \
                     --output tsv --query accessToken)
            echo "::add-mask::$TOKEN"
            echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Docker login with token
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_SERVER }}
          username: 00000000-0000-0000-0000-000000000000 # literal value per ACR docs
          password: ${{ steps.acr_token.outputs.token }}

      - name: Build & push image
        run: |
          docker build -f ./$DOCKERFILE_PATH/Dockerfile -t $REGISTRY_SERVER/$IMAGE_NAME:$IMAGE_TAG .
          docker push $REGISTRY_SERVER/$IMAGE_NAME:$IMAGE_TAG

      - name: Restart App Service
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp restart \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RG_NAME }}
